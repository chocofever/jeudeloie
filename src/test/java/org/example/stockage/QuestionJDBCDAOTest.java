package org.example.stockage;

import org.example.data.QuestionDTO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

class QuestionJDBCDAOTest {

    @BeforeEach
    void beforeEach () {
        try ( Connection connection = DatabaseAccess.getConnection() ){
            connection.setAutoCommit(false);

            PreparedStatement tableDelete = connection.prepareStatement(
                    "drop table if exists questions;");
            tableDelete.executeUpdate();

            PreparedStatement tableCreation = connection.prepareStatement(
                    "CREATE TABLE IF NOT EXISTS questions (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                            " question varchar(256) not null," +
                            " answer varchar(256) not null);");
            tableCreation.executeUpdate();
            tableCreation.close();

            PreparedStatement insert = connection.prepareStatement(
                    "insert into questions (question, answer) values(?,?)"
            );
            insert.setString(1, "What?");
            insert.setString(2, "yes");
            insert.executeUpdate();
            insert.close();

            connection.commit();
        } catch (SQLException | DBAccessException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    void get() {
        try {
            QuestionJDBCDAO dao = new QuestionJDBCDAO();
            Optional<QuestionDTO> question = dao.get(0);
            assertTrue(question.isPresent());
            assertEquals("What?", question.get().question());
            assertEquals("yes", question.get().answer());
            Optional<QuestionDTO> question2 = dao.get(1);
            assertTrue(question2.isEmpty());
        }
        catch (Exception e) {
            fail(e.getMessage());
        }
    }

    @Test
    void getAll() {
        try {
            QuestionJDBCDAO dao = new QuestionJDBCDAO();
            List<QuestionDTO> questions = dao.getAll();
            assertEquals(1, questions.size());
            assertEquals("What?", questions.getFirst().question());
            assertEquals("yes", questions.getFirst().answer());
        }
        catch (Exception e) {
            fail(e.getMessage());
        }
    }

    @Test
    void create() {
        try {
        QuestionJDBCDAO dao = new QuestionJDBCDAO();
        QuestionDTO dto = new QuestionDTO(-1, "Here?", "no");
        int newId = dao.create(dto);
        assertEquals(1, newId);
        Optional<QuestionDTO> question = dao.get(newId);
        assertTrue(question.isPresent());
        assertEquals("Here?", question.get().question());
        assertEquals("no", question.get().answer());
        }
        catch (Exception e) {
            fail(e.getMessage());
        }

    }

    @Test
    void delete() {
        try {
            QuestionJDBCDAO dao = new QuestionJDBCDAO();
            dao.delete(dao.get(0).get());
            Optional<QuestionDTO> question = dao.get(0);
            assertTrue(question.isEmpty());
        }
        catch (Exception e) {
            fail(e.getMessage());
        }
    }

    @Test
    void update() {
        try {
            QuestionJDBCDAO dao = new QuestionJDBCDAO();
            QuestionDTO dto = new QuestionDTO(0, "What?", "no");
            dao.update(dto);
            Optional<QuestionDTO> question = dao.get(0);
            assertTrue(question.isPresent());
            assertEquals("What?", question.get().question());
            assertEquals("no", question.get().answer());
        }
        catch (Exception e) {
            fail(e.getMessage());
        }
    }
}